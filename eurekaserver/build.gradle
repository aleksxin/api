buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
    }
}

plugins {
    id 'org.hidetake.ssh' version '2.9.0'
}
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"
apply plugin: "application"
apply plugin: "nebula.ospackage"


group 'bg.keit.api'
version '1.0'

mainClassName = "bg.keit.api.eureka.EurekaServerApp"


jar {
//    baseName = 'eureka-service'
//    version = '0.0.1'
    enabled=true
}



remotes {
    webServer {
        host = '192.168.101.107'
        user = 'alexi'
        password ="MOKSD"

    }
}
ssh.settings {
    knownHosts = allowAnyHosts
}
task deploy {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                // Execute a command
             //   def result = execute 'sudo service httpd status'

                // Any Gradle methods or properties are available in a session closure
                put from: 'build\\distributions\\eurekaserver_1.0-1_amd64.deb', into: '/home/alexi/webapps'

            }

        }
    }
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-server')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

bootJar{
 //   classifier='boot'
}
startScripts{

    libsDirName='lib/keitapi'
}
bootStartScripts{
    libsDirName='lib/keitapi'
}



ospackage {
   // packageName = 'foo'
   // version = '1.2.3'
    release = '1'
    arch = 'amd64'
    os = LINUX
    type = BINARY

   // installUtils file('scripts/rpm/utils.sh')
 //   preInstall file('scripts/rpm/preInstall.sh')
 //   postInstall file('scripts/rpm/postInstall.sh')
  //  preUninstall 'touch /tmp/myfile'
  //  postUninstall file('scripts/rpm/postUninstall.sh')

    requires('openjdk-8-jre')

    into '/usr/local'
    user "root"
    permissionGroup "root"

    from(jar.outputs.files) {
        into 'lib/keitapi'
    }
    from(configurations.runtime) {
        into 'lib/keitapi'
    }
    from('lib') {
        into 'lib'
    }
    from('build/bootScripts') {
        into 'bin'
        exclude 'database'
        fileMode = 0755
    }
    from('src/main/resources') {
        fileType CONFIG | NOREPLACE
        into '/etc/keitapi'
    }
    from('home') {
        // Creating directory entries (or not) in the RPM is normally left up to redline-rpm library.
        // Use this to explicitly create an entry -- for setting directory fileMode on system directories.
        createDirectoryEntry = true
        fileMode = 0500
        into 'home'
    }
    from('endorsed') {
        // Will tell redline-rpm not to auto create directories, which
        // is sometimes necessary to avoid rpm directory conflicts
        addParentDirs = false
        into '/usr/share/tomcat/endorsed'
    }

}

buildRpm {
    requires('bar', '2.2', GREATER | EQUAL)
    requires('baz', '1.0.1', LESS)
    link('/etc/init.d/foo', '/opt/foo/bin/foo.init')
}

buildDeb {
   // requires('bat', '1.0.1')
   // link('/etc/init.d/foo', '/opt/foo/bin/foo.upstart')
}

startScripts{

}


